// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/fanzhangio/superkomputer/pkg/rest/models"
)

// FetchUserClustersOKCode is the HTTP code returned for type FetchUserClustersOK
const FetchUserClustersOKCode int = 200

/*FetchUserClustersOK 200 response with the list of using clusters of user

swagger:response fetchUserClustersOK
*/
type FetchUserClustersOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Cluster `json:"body,omitempty"`
}

// NewFetchUserClustersOK creates FetchUserClustersOK with default headers values
func NewFetchUserClustersOK() *FetchUserClustersOK {

	return &FetchUserClustersOK{}
}

// WithPayload adds the payload to the fetch user clusters o k response
func (o *FetchUserClustersOK) WithPayload(payload []*models.Cluster) *FetchUserClustersOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the fetch user clusters o k response
func (o *FetchUserClustersOK) SetPayload(payload []*models.Cluster) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FetchUserClustersOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		payload = make([]*models.Cluster, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*FetchUserClustersDefault Error

swagger:response fetchUserClustersDefault
*/
type FetchUserClustersDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewFetchUserClustersDefault creates FetchUserClustersDefault with default headers values
func NewFetchUserClustersDefault(code int) *FetchUserClustersDefault {
	if code <= 0 {
		code = 500
	}

	return &FetchUserClustersDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the fetch user clusters default response
func (o *FetchUserClustersDefault) WithStatusCode(code int) *FetchUserClustersDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the fetch user clusters default response
func (o *FetchUserClustersDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the fetch user clusters default response
func (o *FetchUserClustersDefault) WithPayload(payload *models.Error) *FetchUserClustersDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the fetch user clusters default response
func (o *FetchUserClustersDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *FetchUserClustersDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
